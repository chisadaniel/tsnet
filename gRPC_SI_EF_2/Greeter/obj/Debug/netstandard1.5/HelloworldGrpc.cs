// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: helloworld.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Helloworld {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class Greeter
  {
    static readonly string __ServiceName = "helloworld.Greeter";

    static readonly grpc::Marshaller<global::Helloworld.HelloRequest> __Marshaller_helloworld_HelloRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.HelloRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.HelloReply> __Marshaller_helloworld_HelloReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.HelloReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.ObjectIdRequest> __Marshaller_helloworld_ObjectIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.ObjectIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.PostDTO> __Marshaller_helloworld_PostDTO = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.PostDTO.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.StringRequest> __Marshaller_helloworld_StringRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.StringRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.BoolReply> __Marshaller_helloworld_BoolReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.BoolReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.EmptyMessage> __Marshaller_helloworld_EmptyMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.EmptyMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.PostDTOCollenction> __Marshaller_helloworld_PostDTOCollenction = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.PostDTOCollenction.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.CommentDTO> __Marshaller_helloworld_CommentDTO = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.CommentDTO.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.CommentAndPostId> __Marshaller_helloworld_CommentAndPostId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.CommentAndPostId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.UpdateCommentMessage> __Marshaller_helloworld_UpdateCommentMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.UpdateCommentMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Helloworld.CommentDTOCollection> __Marshaller_helloworld_CommentDTOCollection = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Helloworld.CommentDTOCollection.Parser.ParseFrom);

    static readonly grpc::Method<global::Helloworld.HelloRequest, global::Helloworld.HelloReply> __Method_SayHello = new grpc::Method<global::Helloworld.HelloRequest, global::Helloworld.HelloReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayHello",
        __Marshaller_helloworld_HelloRequest,
        __Marshaller_helloworld_HelloReply);

    static readonly grpc::Method<global::Helloworld.HelloRequest, global::Helloworld.HelloReply> __Method_SayHelloAgain = new grpc::Method<global::Helloworld.HelloRequest, global::Helloworld.HelloReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayHelloAgain",
        __Marshaller_helloworld_HelloRequest,
        __Marshaller_helloworld_HelloReply);

    static readonly grpc::Method<global::Helloworld.ObjectIdRequest, global::Helloworld.PostDTO> __Method_GetPostById = new grpc::Method<global::Helloworld.ObjectIdRequest, global::Helloworld.PostDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPostById",
        __Marshaller_helloworld_ObjectIdRequest,
        __Marshaller_helloworld_PostDTO);

    static readonly grpc::Method<global::Helloworld.StringRequest, global::Helloworld.PostDTO> __Method_GetPostByTitle = new grpc::Method<global::Helloworld.StringRequest, global::Helloworld.PostDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPostByTitle",
        __Marshaller_helloworld_StringRequest,
        __Marshaller_helloworld_PostDTO);

    static readonly grpc::Method<global::Helloworld.PostDTO, global::Helloworld.PostDTO> __Method_SubmitPost = new grpc::Method<global::Helloworld.PostDTO, global::Helloworld.PostDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitPost",
        __Marshaller_helloworld_PostDTO,
        __Marshaller_helloworld_PostDTO);

    static readonly grpc::Method<global::Helloworld.PostDTO, global::Helloworld.PostDTO> __Method_UpdatePost = new grpc::Method<global::Helloworld.PostDTO, global::Helloworld.PostDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePost",
        __Marshaller_helloworld_PostDTO,
        __Marshaller_helloworld_PostDTO);

    static readonly grpc::Method<global::Helloworld.ObjectIdRequest, global::Helloworld.BoolReply> __Method_DeletePost = new grpc::Method<global::Helloworld.ObjectIdRequest, global::Helloworld.BoolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePost",
        __Marshaller_helloworld_ObjectIdRequest,
        __Marshaller_helloworld_BoolReply);

    static readonly grpc::Method<global::Helloworld.EmptyMessage, global::Helloworld.PostDTOCollenction> __Method_GetAllPosts = new grpc::Method<global::Helloworld.EmptyMessage, global::Helloworld.PostDTOCollenction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllPosts",
        __Marshaller_helloworld_EmptyMessage,
        __Marshaller_helloworld_PostDTOCollenction);

    static readonly grpc::Method<global::Helloworld.ObjectIdRequest, global::Helloworld.CommentDTO> __Method_GetCommentById = new grpc::Method<global::Helloworld.ObjectIdRequest, global::Helloworld.CommentDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCommentById",
        __Marshaller_helloworld_ObjectIdRequest,
        __Marshaller_helloworld_CommentDTO);

    static readonly grpc::Method<global::Helloworld.CommentDTO, global::Helloworld.CommentDTO> __Method_SubmitComment = new grpc::Method<global::Helloworld.CommentDTO, global::Helloworld.CommentDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitComment",
        __Marshaller_helloworld_CommentDTO,
        __Marshaller_helloworld_CommentDTO);

    static readonly grpc::Method<global::Helloworld.CommentAndPostId, global::Helloworld.CommentDTO> __Method_AddComment = new grpc::Method<global::Helloworld.CommentAndPostId, global::Helloworld.CommentDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddComment",
        __Marshaller_helloworld_CommentAndPostId,
        __Marshaller_helloworld_CommentDTO);

    static readonly grpc::Method<global::Helloworld.UpdateCommentMessage, global::Helloworld.CommentDTO> __Method_UpdateComment = new grpc::Method<global::Helloworld.UpdateCommentMessage, global::Helloworld.CommentDTO>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateComment",
        __Marshaller_helloworld_UpdateCommentMessage,
        __Marshaller_helloworld_CommentDTO);

    static readonly grpc::Method<global::Helloworld.ObjectIdRequest, global::Helloworld.BoolReply> __Method_DeleteComment = new grpc::Method<global::Helloworld.ObjectIdRequest, global::Helloworld.BoolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteComment",
        __Marshaller_helloworld_ObjectIdRequest,
        __Marshaller_helloworld_BoolReply);

    static readonly grpc::Method<global::Helloworld.ObjectIdRequest, global::Helloworld.CommentDTOCollection> __Method_GetAllPostRelateComments = new grpc::Method<global::Helloworld.ObjectIdRequest, global::Helloworld.CommentDTOCollection>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllPostRelateComments",
        __Marshaller_helloworld_ObjectIdRequest,
        __Marshaller_helloworld_CommentDTOCollection);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Helloworld.HelloworldReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Greeter</summary>
    [grpc::BindServiceMethod(typeof(Greeter), "BindService")]
    public abstract partial class GreeterBase
    {
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Helloworld.HelloReply> SayHello(global::Helloworld.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sends another greeting
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Helloworld.HelloReply> SayHelloAgain(global::Helloworld.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///PostComment (partea de proto)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Helloworld.PostDTO> GetPostById(global::Helloworld.ObjectIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.PostDTO> GetPostByTitle(global::Helloworld.StringRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.PostDTO> SubmitPost(global::Helloworld.PostDTO request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.PostDTO> UpdatePost(global::Helloworld.PostDTO request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.BoolReply> DeletePost(global::Helloworld.ObjectIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.PostDTOCollenction> GetAllPosts(global::Helloworld.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.CommentDTO> GetCommentById(global::Helloworld.ObjectIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.CommentDTO> SubmitComment(global::Helloworld.CommentDTO request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.CommentDTO> AddComment(global::Helloworld.CommentAndPostId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.CommentDTO> UpdateComment(global::Helloworld.UpdateCommentMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.BoolReply> DeleteComment(global::Helloworld.ObjectIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Helloworld.CommentDTOCollection> GetAllPostRelateComments(global::Helloworld.ObjectIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Greeter</summary>
    public partial class GreeterClient : grpc::ClientBase<GreeterClient>
    {
      /// <summary>Creates a new client for Greeter</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GreeterClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Greeter that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GreeterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GreeterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GreeterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.HelloReply SayHello(global::Helloworld.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.HelloReply SayHello(global::Helloworld.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHello, null, options, request);
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.HelloReply> SayHelloAsync(global::Helloworld.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.HelloReply> SayHelloAsync(global::Helloworld.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHello, null, options, request);
      }
      /// <summary>
      /// Sends another greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.HelloReply SayHelloAgain(global::Helloworld.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHelloAgain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends another greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.HelloReply SayHelloAgain(global::Helloworld.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHelloAgain, null, options, request);
      }
      /// <summary>
      /// Sends another greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.HelloReply> SayHelloAgainAsync(global::Helloworld.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHelloAgainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends another greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.HelloReply> SayHelloAgainAsync(global::Helloworld.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHelloAgain, null, options, request);
      }
      /// <summary>
      ///PostComment (partea de proto)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.PostDTO GetPostById(global::Helloworld.ObjectIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPostById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///PostComment (partea de proto)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Helloworld.PostDTO GetPostById(global::Helloworld.ObjectIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPostById, null, options, request);
      }
      /// <summary>
      ///PostComment (partea de proto)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.PostDTO> GetPostByIdAsync(global::Helloworld.ObjectIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPostByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///PostComment (partea de proto)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Helloworld.PostDTO> GetPostByIdAsync(global::Helloworld.ObjectIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPostById, null, options, request);
      }
      public virtual global::Helloworld.PostDTO GetPostByTitle(global::Helloworld.StringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPostByTitle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.PostDTO GetPostByTitle(global::Helloworld.StringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPostByTitle, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.PostDTO> GetPostByTitleAsync(global::Helloworld.StringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPostByTitleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.PostDTO> GetPostByTitleAsync(global::Helloworld.StringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPostByTitle, null, options, request);
      }
      public virtual global::Helloworld.PostDTO SubmitPost(global::Helloworld.PostDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitPost(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.PostDTO SubmitPost(global::Helloworld.PostDTO request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitPost, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.PostDTO> SubmitPostAsync(global::Helloworld.PostDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitPostAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.PostDTO> SubmitPostAsync(global::Helloworld.PostDTO request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitPost, null, options, request);
      }
      public virtual global::Helloworld.PostDTO UpdatePost(global::Helloworld.PostDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePost(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.PostDTO UpdatePost(global::Helloworld.PostDTO request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePost, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.PostDTO> UpdatePostAsync(global::Helloworld.PostDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePostAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.PostDTO> UpdatePostAsync(global::Helloworld.PostDTO request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePost, null, options, request);
      }
      public virtual global::Helloworld.BoolReply DeletePost(global::Helloworld.ObjectIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePost(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.BoolReply DeletePost(global::Helloworld.ObjectIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePost, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.BoolReply> DeletePostAsync(global::Helloworld.ObjectIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePostAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.BoolReply> DeletePostAsync(global::Helloworld.ObjectIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePost, null, options, request);
      }
      public virtual global::Helloworld.PostDTOCollenction GetAllPosts(global::Helloworld.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllPosts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.PostDTOCollenction GetAllPosts(global::Helloworld.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllPosts, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.PostDTOCollenction> GetAllPostsAsync(global::Helloworld.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllPostsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.PostDTOCollenction> GetAllPostsAsync(global::Helloworld.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllPosts, null, options, request);
      }
      public virtual global::Helloworld.CommentDTO GetCommentById(global::Helloworld.ObjectIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCommentById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.CommentDTO GetCommentById(global::Helloworld.ObjectIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCommentById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.CommentDTO> GetCommentByIdAsync(global::Helloworld.ObjectIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCommentByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.CommentDTO> GetCommentByIdAsync(global::Helloworld.ObjectIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCommentById, null, options, request);
      }
      public virtual global::Helloworld.CommentDTO SubmitComment(global::Helloworld.CommentDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitComment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.CommentDTO SubmitComment(global::Helloworld.CommentDTO request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitComment, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.CommentDTO> SubmitCommentAsync(global::Helloworld.CommentDTO request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitCommentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.CommentDTO> SubmitCommentAsync(global::Helloworld.CommentDTO request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitComment, null, options, request);
      }
      public virtual global::Helloworld.CommentDTO AddComment(global::Helloworld.CommentAndPostId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddComment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.CommentDTO AddComment(global::Helloworld.CommentAndPostId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddComment, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.CommentDTO> AddCommentAsync(global::Helloworld.CommentAndPostId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddCommentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.CommentDTO> AddCommentAsync(global::Helloworld.CommentAndPostId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddComment, null, options, request);
      }
      public virtual global::Helloworld.CommentDTO UpdateComment(global::Helloworld.UpdateCommentMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateComment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.CommentDTO UpdateComment(global::Helloworld.UpdateCommentMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateComment, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.CommentDTO> UpdateCommentAsync(global::Helloworld.UpdateCommentMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCommentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.CommentDTO> UpdateCommentAsync(global::Helloworld.UpdateCommentMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateComment, null, options, request);
      }
      public virtual global::Helloworld.BoolReply DeleteComment(global::Helloworld.ObjectIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteComment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.BoolReply DeleteComment(global::Helloworld.ObjectIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteComment, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.BoolReply> DeleteCommentAsync(global::Helloworld.ObjectIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCommentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.BoolReply> DeleteCommentAsync(global::Helloworld.ObjectIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteComment, null, options, request);
      }
      public virtual global::Helloworld.CommentDTOCollection GetAllPostRelateComments(global::Helloworld.ObjectIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllPostRelateComments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Helloworld.CommentDTOCollection GetAllPostRelateComments(global::Helloworld.ObjectIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllPostRelateComments, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.CommentDTOCollection> GetAllPostRelateCommentsAsync(global::Helloworld.ObjectIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllPostRelateCommentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Helloworld.CommentDTOCollection> GetAllPostRelateCommentsAsync(global::Helloworld.ObjectIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllPostRelateComments, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GreeterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GreeterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GreeterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SayHello, serviceImpl.SayHello)
          .AddMethod(__Method_SayHelloAgain, serviceImpl.SayHelloAgain)
          .AddMethod(__Method_GetPostById, serviceImpl.GetPostById)
          .AddMethod(__Method_GetPostByTitle, serviceImpl.GetPostByTitle)
          .AddMethod(__Method_SubmitPost, serviceImpl.SubmitPost)
          .AddMethod(__Method_UpdatePost, serviceImpl.UpdatePost)
          .AddMethod(__Method_DeletePost, serviceImpl.DeletePost)
          .AddMethod(__Method_GetAllPosts, serviceImpl.GetAllPosts)
          .AddMethod(__Method_GetCommentById, serviceImpl.GetCommentById)
          .AddMethod(__Method_SubmitComment, serviceImpl.SubmitComment)
          .AddMethod(__Method_AddComment, serviceImpl.AddComment)
          .AddMethod(__Method_UpdateComment, serviceImpl.UpdateComment)
          .AddMethod(__Method_DeleteComment, serviceImpl.DeleteComment)
          .AddMethod(__Method_GetAllPostRelateComments, serviceImpl.GetAllPostRelateComments).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GreeterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SayHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.HelloRequest, global::Helloworld.HelloReply>(serviceImpl.SayHello));
      serviceBinder.AddMethod(__Method_SayHelloAgain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.HelloRequest, global::Helloworld.HelloReply>(serviceImpl.SayHelloAgain));
      serviceBinder.AddMethod(__Method_GetPostById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.ObjectIdRequest, global::Helloworld.PostDTO>(serviceImpl.GetPostById));
      serviceBinder.AddMethod(__Method_GetPostByTitle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.StringRequest, global::Helloworld.PostDTO>(serviceImpl.GetPostByTitle));
      serviceBinder.AddMethod(__Method_SubmitPost, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.PostDTO, global::Helloworld.PostDTO>(serviceImpl.SubmitPost));
      serviceBinder.AddMethod(__Method_UpdatePost, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.PostDTO, global::Helloworld.PostDTO>(serviceImpl.UpdatePost));
      serviceBinder.AddMethod(__Method_DeletePost, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.ObjectIdRequest, global::Helloworld.BoolReply>(serviceImpl.DeletePost));
      serviceBinder.AddMethod(__Method_GetAllPosts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.EmptyMessage, global::Helloworld.PostDTOCollenction>(serviceImpl.GetAllPosts));
      serviceBinder.AddMethod(__Method_GetCommentById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.ObjectIdRequest, global::Helloworld.CommentDTO>(serviceImpl.GetCommentById));
      serviceBinder.AddMethod(__Method_SubmitComment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.CommentDTO, global::Helloworld.CommentDTO>(serviceImpl.SubmitComment));
      serviceBinder.AddMethod(__Method_AddComment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.CommentAndPostId, global::Helloworld.CommentDTO>(serviceImpl.AddComment));
      serviceBinder.AddMethod(__Method_UpdateComment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.UpdateCommentMessage, global::Helloworld.CommentDTO>(serviceImpl.UpdateComment));
      serviceBinder.AddMethod(__Method_DeleteComment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.ObjectIdRequest, global::Helloworld.BoolReply>(serviceImpl.DeleteComment));
      serviceBinder.AddMethod(__Method_GetAllPostRelateComments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Helloworld.ObjectIdRequest, global::Helloworld.CommentDTOCollection>(serviceImpl.GetAllPostRelateComments));
    }

  }
}
#endregion
