//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IMediaProperties")]
    public interface IMediaProperties
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMediaProperties/InsertColection", ReplyAction="http://tempuri.org/InterfaceMediaProperties/InsertColectionResponse")]
        System.Threading.Tasks.Task InsertColectionAsync(string[] mediaObjects);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMediaProperties/InsertProperty", ReplyAction="http://tempuri.org/InterfaceMediaProperties/InsertPropertyResponse")]
        System.Threading.Tasks.Task InsertPropertyAsync(string name, string property);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMediaProperties/GetAll", ReplyAction="http://tempuri.org/InterfaceMediaProperties/GetAllResponse")]
        System.Threading.Tasks.Task<string[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMediaProperties/GetVideos", ReplyAction="http://tempuri.org/InterfaceMediaProperties/GetVideosResponse")]
        System.Threading.Tasks.Task<string[]> GetVideosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMediaProperties/GetDescpritionsOfAnItem", ReplyAction="http://tempuri.org/InterfaceMediaProperties/GetDescpritionsOfAnItemResponse")]
        System.Threading.Tasks.Task<string[]> GetDescpritionsOfAnItemAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMediaProperties/AddNewDescription", ReplyAction="http://tempuri.org/InterfaceMediaProperties/AddNewDescriptionResponse")]
        System.Threading.Tasks.Task<int> AddNewDescriptionAsync(string name, string property);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMediaProperties/UpdateDescription", ReplyAction="http://tempuri.org/InterfaceMediaProperties/UpdateDescriptionResponse")]
        System.Threading.Tasks.Task UpdateDescriptionAsync(string name, string old_description, string new_description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMediaProperties/DeleteDescriptionOfItem", ReplyAction="http://tempuri.org/InterfaceMediaProperties/DeleteDescriptionOfItemResponse")]
        System.Threading.Tasks.Task DeleteDescriptionOfItemAsync(string name, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMediaProperties/GetElementFromSearch", ReplyAction="http://tempuri.org/InterfaceMediaProperties/GetElementFromSearchResponse")]
        System.Threading.Tasks.Task<string[]> GetElementFromSearchAsync(string search_text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMediaProperties/DeleteElementFromDb", ReplyAction="http://tempuri.org/InterfaceMediaProperties/DeleteElementFromDbResponse")]
        System.Threading.Tasks.Task DeleteElementFromDbAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMediaProperties/GetWarnings", ReplyAction="http://tempuri.org/InterfaceMediaProperties/GetWarningsResponse")]
        System.Threading.Tasks.Task<string[]> GetWarningsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IMediaPropertiesChannel : ServiceReference.IMediaProperties, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class MediaPropertiesClient : System.ServiceModel.ClientBase<ServiceReference.IMediaProperties>, ServiceReference.IMediaProperties
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MediaPropertiesClient() : 
                base(MediaPropertiesClient.GetDefaultBinding(), MediaPropertiesClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMediaProperties.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaPropertiesClient(EndpointConfiguration endpointConfiguration) : 
                base(MediaPropertiesClient.GetBindingForEndpoint(endpointConfiguration), MediaPropertiesClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaPropertiesClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MediaPropertiesClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaPropertiesClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MediaPropertiesClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaPropertiesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task InsertColectionAsync(string[] mediaObjects)
        {
            return base.Channel.InsertColectionAsync(mediaObjects);
        }
        
        public System.Threading.Tasks.Task InsertPropertyAsync(string name, string property)
        {
            return base.Channel.InsertPropertyAsync(name, property);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllAsync()
        {
            return base.Channel.GetAllAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> GetVideosAsync()
        {
            return base.Channel.GetVideosAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> GetDescpritionsOfAnItemAsync(string name)
        {
            return base.Channel.GetDescpritionsOfAnItemAsync(name);
        }
        
        public System.Threading.Tasks.Task<int> AddNewDescriptionAsync(string name, string property)
        {
            return base.Channel.AddNewDescriptionAsync(name, property);
        }
        
        public System.Threading.Tasks.Task UpdateDescriptionAsync(string name, string old_description, string new_description)
        {
            return base.Channel.UpdateDescriptionAsync(name, old_description, new_description);
        }
        
        public System.Threading.Tasks.Task DeleteDescriptionOfItemAsync(string name, string description)
        {
            return base.Channel.DeleteDescriptionOfItemAsync(name, description);
        }
        
        public System.Threading.Tasks.Task<string[]> GetElementFromSearchAsync(string search_text)
        {
            return base.Channel.GetElementFromSearchAsync(search_text);
        }
        
        public System.Threading.Tasks.Task DeleteElementFromDbAsync(string name)
        {
            return base.Channel.DeleteElementFromDbAsync(name);
        }
        
        public System.Threading.Tasks.Task<string[]> GetWarningsAsync()
        {
            return base.Channel.GetWarningsAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMediaProperties))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMediaProperties))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MediaPropertiesClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMediaProperties);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MediaPropertiesClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMediaProperties);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMediaProperties,
        }
    }
}
